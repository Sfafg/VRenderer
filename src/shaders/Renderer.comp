#version 450

struct RenderObject
{
    uint objectID;
    uint batchID;
    uint meshID;
};

struct DrawIndexed 
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    uint vertexOffset;
    uint firstInstance;
};

struct BoundingBox
{
    float minX;
    float minY;
    float minZ;
    float maxX;
    float maxY;
    float maxZ;
};

layout(push_constant) uniform PushConstants{
    uint objectCount;
    uint pyramidWidth;
    uint pyramidHeight;
};

layout(std140, binding = 0) uniform CameraMatrices{
    mat4 projection;
    mat4 view;
    mat4 viewProjection;
};

layout(std430, binding = 1) readonly buffer RenderObjects {
   RenderObject renderObjects[];
};
layout(std430, binding = 2) buffer DrawInstructions{
    DrawIndexed drawInstructions[];
};
layout(std430, binding = 3) buffer InstanceMapping{
    uint instanceMapping[];
};
layout(std430, binding = 4) buffer MeshBoundingBoxes{
    BoundingBox boundingBox[];
};
layout(std430, binding = 5) buffer Transformations{
    mat4 model[];
};
layout (binding = 6) uniform sampler2D depthPyramid;


bool isVisible(RenderObject object)
{
    BoundingBox bounds = boundingBox[object.meshID];
    vec3 Min = vec3(bounds.minX,bounds.minY,bounds.minZ);
    vec3 Max = vec3(bounds.maxX,bounds.maxY,bounds.maxZ);

    vec3 boundingVertices[8] ={
        vec3(Min.x,Min.y,Min.z),
        vec3(Min.x,Min.y,Max.z),
        vec3(Min.x,Max.y,Min.z),
        vec3(Min.x,Max.y,Max.z),
        vec3(Max.x,Min.y,Min.z),
        vec3(Max.x,Min.y,Max.z),
        vec3(Max.x,Max.y,Min.z),
        vec3(Max.x,Max.y,Max.z),
    };

    int outsideCounts[6] = {0,0,0,0,0,0};
    int desiredCount = 8;
    for(int i = 0; i < 8; i++)
    {
        vec4 p = viewProjection * model[object.objectID] * vec4(boundingVertices[i],1.0);
        if(p.w <= 0) 
        {
            desiredCount--;
            continue;
        }

        if(p.x <= -p.w) outsideCounts[0]++;
        if(p.x >= p.w) outsideCounts[1]++;
        if(p.y <= -p.w) outsideCounts[2]++;
        if(p.y >= p.w) outsideCounts[3]++;
        if(p.z <= -p.w) outsideCounts[4]++;
        if(p.z >= p.w) outsideCounts[5]++;

        boundingVertices[i] = p.xyz/p.w;
    }
    for(int i =0; i < 6; i ++)
        if(outsideCounts[i] >= desiredCount)
            return false;
            
    vec4 aabb = vec4(999999,999999,-999999,-999999);
    float boundingDepth = 1;
    for(int i = 0; i < 8; i++)
    {
        if(boundingVertices[i].x < aabb.x) aabb.x = boundingVertices[i].x;
        if(boundingVertices[i].x > aabb.z) aabb.z = boundingVertices[i].x;

        if(boundingVertices[i].y < aabb.y) aabb.y = boundingVertices[i].y;
        if(boundingVertices[i].y > aabb.w) aabb.w = boundingVertices[i].y;

        if(boundingVertices[i].z < boundingDepth)
            boundingDepth = boundingVertices[i].z;
    }
    if(boundingDepth <= 0) return true;

    aabb = aabb * 0.5 + 0.5;
	float width = (aabb.z - aabb.x) * pyramidWidth;
	float height = (aabb.w - aabb.y) * pyramidHeight;

	//find the mipmap level that will match the screen size of bounding box
	float level = floor(log2(max(width, height)));

	//sample the depth pyramid at that specific level
	float depth = textureLod(depthPyramid, (aabb.xy + aabb.zw) * 0.5, level).x;
	return boundingDepth <= depth;
}

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
void main() 
{
    uint index = gl_GlobalInvocationID.x;
    if(index > objectCount) return;

    if(isVisible(renderObjects[index]))
    {
        uint instanceIndex = atomicAdd(drawInstructions[renderObjects[index].batchID].instanceCount,1) + drawInstructions[renderObjects[index].batchID].firstInstance;
        instanceMapping[instanceIndex] = renderObjects[index].objectID;
    }
}